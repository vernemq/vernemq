---
name: Checks for a PR

on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # Default OTP version used for current releases
  DEFAULT_RELEASE_OTP: 25.3.2

jobs:
  code_checks:
    name: Check code style and quality
    runs-on: ubuntu-22.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get install -y libsnappy-dev
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cache PLTs
        id: cache-plts
        uses: actions/cache@v3
        with:
          path: |
            plts
            plts_base
          key: plts-cache-${{ runner.os }}-otp-${{env.DEFAULT_RELEASE_OTP}}-hash-${{hashFiles('rebar.lock')}}
      - name: Cache _build/default
        uses: actions/cache@v3
        with:
          path: _build/default
          key: _build_default-cache-${{runner.os}}-otp-${{env.DEFAULT_RELEASE_OTP}}-v2-hash-${{hashFiles('rebar.lock')}}
      - name: Cache rebar3
        uses: actions/cache@v3
        with:
          path: ~/.cache/rebar3
          key: rebar3-cache-${{runner.os}}-otp-${{env.DEFAULT_RELEASE_OTP}}-v2-hash-${{hashFiles('rebar.lock')}}
      - name: Install Erlang/OTP
        uses: erlef/setup-beam@v1.17
        with:
          otp-version: ${{ env.DEFAULT_RELEASE_OTP }}
      - name: Check code formatting (erlfmt)
        run: ./rebar3 fmt -c
      - name: Run dialyzer type checker
        run: ./rebar3 dialyzer

  coverage:
    name: Run tests with coverage
    runs-on: ubuntu-22.04
    timeout-minutes: 90
    services:
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: vmq_test_user
          POSTGRES_PASSWORD: vmq_test_password
          POSTGRES_DB: vmq_test_database
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mysql:
        image: mysql:5.7.33
        ports:
          - 3306:3306
        env:
          MYSQL_USER: vmq_test_user
          MYSQL_PASSWORD: vmq_test_password
          MYSQL_DATABASE: vmq_test_database
      memcached:
        image: memcached
        ports:
          - 11211:11211
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: vmq_test_user
          MONGO_INITDB_ROOT_PASSWORD: vmq_test_password
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install libsnappy-dev pcregrep
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Erlang/OTP
        uses: erlef/setup-beam@v1.17
        with:
          otp-version: ${{ env.DEFAULT_RELEASE_OTP }}
      - name: Cache _build/default
        uses: actions/cache@v3
        with:
          path: _build/default
          key: _build_default-cache-${{runner.os}}-otp-${{env.DEFAULT_RELEASE_OTP}}-v2-hash-${{hashFiles('rebar.lock')}}
      - name: Cache rebar3
        uses: actions/cache@v3
        with:
          path: ~/.cache/rebar3
          key: rebar3-cache-${{runner.os}}-otp-${{env.DEFAULT_RELEASE_OTP}}-v2-hash-${{hashFiles('rebar.lock')}}
      - name: Compile
        run: ./rebar3 compile
      - name: Run Tests
        run: |
          ./rebar3 as ci_tests,test do eunit --cover, ct --cover ||
                (echo -e "\nContents of retry.spec\n" &&
                cat _build/ci_tests+test/logs/retry.spec &&
                echo -e "\nRetrying failed suites:" &&
                echo $(pcregrep -o2 -o3 --om-separator="/" -M "^{(cases),\"(.+)\",[^\w]*(\w+),(.|\n)*?\.$" _build/ci_tests+test/logs/retry.spec | uniq | paste -s -d, -) &&
                ./rebar3 ct --suite=$(pcregrep -o2 -o3 --om-separator="/" -M "^{(cases),\"(.+)\",[^\w]*(\w+),(.|\n)*?\.$" _build/ci_tests+test/logs/retry.spec | uniq | paste -s -d, -))
      - run: ./rebar3 cover --verbose
      - name: Archive coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: _build/ci_tests+test/cover/
          if-no-files-found: warn # do not fail if no coverdata found
          retention-days: 5
      - name: Compress CT test report
        if: ${{ ! cancelled() }}
        run: |
          tar -czf ct_test_report.tar.gz _build/ci_tests+test/logs/
      - name: Archive CT test report
        uses: actions/upload-artifact@v3
        if: ${{ ! cancelled() }}
        with:
          name: ct-test-report
          path: ct_test_report.tar.gz
          retention-days: 5

  tests:
    name: Test on ${{ matrix.os }} with OTP ${{ matrix.otp }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          # Monterrey
          - macos-12
        otp:
          - "26.1"
          - "25.3"
          - "24.3"

    steps:
      - name: Install dependencies (Linux)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install libsnappy-dev mosquitto-clients pcregrep
      - name: Configure Homebrew cache
        if: ${{ startsWith(matrix.os, 'macos') }}
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/Homebrew/
            ~/Library/Caches/Homebrew/downloads/
          key: brew-${{ runner.os }}-${{ matrix.otp  }}
      - name: Install Dependencies (OSX)
        if: ${{ startsWith(matrix.os, 'macos') }}
        run: |
          export majorversion="$(cut -d '.' -f 1 <<< "${{ matrix.otp }}")"
          brew install coreutils snappy erlang@$majorversion openssl mosquitto pcre
          echo "/usr/local/opt/erlang@$majorversion/bin" >> $GITHUB_PATH
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Erlang/OTP
        # setup beam doesn't provide MacOS packages
        # we use Homebrew to instal them
        if: ${{ !startsWith(matrix.os , 'macos') }}
        uses: erlef/setup-beam@v1.17
        with:
          otp-version: ${{ matrix.otp }}
          version-type: strict
      - name: Cache build
        uses: actions/cache@v3
        with:
          path: _build/default
          key: ${{ runner.os }}-build-default-${{ matrix.otp }}-v2-${{ hashFiles(format('rebar.lock')) }}
      - name: Cache rebar3
        uses: actions/cache@v3
        with:
          path: ~/.cache/rebar3
          key: ${{runner.os}}-rebar3-${{matrix.otp}}-v2-${{ hashFiles(format('rebar.lock')) }}
      - name: Compile
        run: ./rebar3 compile
      - name: Run tests
        run: |
          ./rebar3 do eunit, ct ||
                (echo -e "\nContents of retry.spec\n" &&
                cat _build/test/logs/retry.spec &&
                echo -e "\nRetrying failed suites:" &&
                echo $(pcregrep -o2 -o3 --om-separator="/" -M "^{(cases),\"(.+)\",[^\w]*(\w+),(.|\n)*?\.$" _build/test/logs/retry.spec | uniq | paste -s -d, -) &&
                ./rebar3 ct --suite=$(pcregrep -o2 -o3 --om-separator="/" -M "^{(cases),\"(.+)\",[^\w]*(\w+),(.|\n)*?\.$" _build/test/logs/retry.spec | uniq | paste -s -d, -))
      - name: Upload JUnit Test Report
        uses: actions/upload-artifact@v3
        if: always() # always run even if the previous step fails
        with:
          name: junit-test-results-${{ runner.os }}-${{ matrix.otp }}
          path: "**/_build/test/logs/*/junit_report.xml"
          retention-days: 1
      - name: Release Smoke tests
        run: |
          # Release and Start the server
          make rel
          # Debug any configuration problem before release starts
          ./_build/default/rel/vernemq/bin/vernemq config generate -l debug
          # Allow anonymous connections
          echo "allow_anonymous = on" >> _build/default/rel/vernemq/etc/vernemq.conf
          ./_build/default/rel/vernemq/bin/vernemq start
          # Wait for port to come up
          timeout 300 sh -c 'until nc -z $0 $1; do sleep 1; done' localhost 1883
          # Ping the server
          ./_build/default/rel/vernemq/bin/vernemq ping | grep -q pong
          # Simple publish/subscribe test
          mosquitto_sub -p 1883 -W 1 -C 1 -t 'tests/simple' >/dev/null &
          export SUB_PID=$!
          mosquitto_pub -p 1883 -t 'tests/simple' -m 'simple-test'
          kill ${SUB_PID} 2>/dev/null || true
          echo "Simple publish/subscribe: ok"
          # Multiple publish/subscribe test (Send each line on a file)
          export EXPECT_MSGS=$(wc -l ./THANKS | cut -d' ' -f1)
          mosquitto_sub -p 1883 -W 1 -C ${EXPECT_MSGS} -t 'tests/multi' >/dev/null &
          export SUB_PID=$!
          mosquitto_pub -p 1883 -t 'tests/multi' -f ./THANKS
          kill ${SUB_PID} 2>/dev/null || true
          echo "Multiple publish/subscribe: ok"
          # Stop the server
          ./_build/default/rel/vernemq/bin/vernemq stop

  # Publish an artifact for the event; used by publish-test-results.yaml
  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}

